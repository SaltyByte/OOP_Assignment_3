from src.DiGraph import DiGraph
import unittest


class TestDiGraph(unittest.TestCase):
    def setUp(self):
        graph = DiGraph()
        graph.add_node(1)
        graph.add_node(2)
        graph.add_node(3)
        graph.add_node(4)
        graph.add_node(5)
        graph.add_node(6)
        graph.add_node(7)
        graph.add_node(8)
        graph.add_node(9)
        graph.add_node(10)
        graph.add_node(11)
        graph.add_node(12)
        graph.add_node(13)
        graph.add_node(14)

        graph.add_edge(1, 2, 5)
        graph.add_edge(2, 3, 2)
        graph.add_edge(2, 4, 1)
        graph.add_edge(3, 2, 5)
        graph.add_edge(3, 4, 10)
        graph.add_edge(1, 5, 3)
        graph.add_edge(7, 3, 2)
        graph.add_edge(7, 4, 2)
        graph.add_edge(7, 9, 5)
        graph.add_edge(9, 5, 3)
        graph.add_edge(5, 4, 12)
        graph.add_edge(4, 9, 1.2)
        graph.add_edge(9, 14, 7)
        graph.add_edge(14, 8, 3)
        graph.add_edge(8, 3, 6)
        graph.add_edge(5, 12, 17)
        graph.add_edge(12, 13, 2)
        graph.add_edge(13, 5, 9.4)
        graph.add_edge(5, 6, 1)
        graph.add_edge(6, 11, 4)
        graph.add_edge(11, 10, 4)
        graph.add_edge(10, 11, 4)
        graph.add_edge(10, 12, 2)
        graph.add_edge(3, 9, 3.5)
        self.graph = graph

    def test_v_e_size_removes_and_add(self):
        graph = DiGraph()
        self.assertEqual(False, self.graph.add_edge(1, 7, -1))
        self.assertEqual(0, graph.e_size())
        self.assertEqual(0, graph.v_size())
        self.assertEqual(0, graph.get_mc())
        self.assertEqual(False, graph.remove_edge(1, 3))
        self.assertEqual({}, graph.all_out_edges_of_node(3))
        self.assertEqual({}, graph.all_in_edges_of_node(3))
        self.assertEqual(14, self.graph.v_size())
        self.assertEqual(24, self.graph.e_size())
        self.assertEqual(True, self.graph.remove_node(4))
        self.assertEqual(True, self.graph.remove_edge(1, 2))
        self.graph.remove_edge(11, 10)
        self.assertEqual(False, self.graph.remove_node(15))
        self.assertEqual(False, self.graph.remove_node(0))
        self.assertEqual(False, self.graph.remove_node(-1))
        self.assertEqual(False, self.graph.remove_edge(11, 11))
        self.assertEqual(False, self.graph.remove_edge(6, 5))
        self.assertEqual(17, self.graph.e_size())
        self.assertEqual(13, self.graph.v_size())
        self.graph.add_node(99)
        self.assertEqual(14, self.graph.v_size())
        self.graph.add_edge(99, 10, 5)
        self.graph.add_edge(99, 5, 5)
        self.graph.add_edge(99, 10, 5)
        self.graph.add_edge(99, 99, 5)
        self.graph.add_edge(10, 99, 5)
        self.graph.add_edge(10, 99, 5)
        self.assertEqual(20, self.graph.e_size())
        self.assertEqual(50, self.graph.get_mc())

    def test_get_all_funcs(self):
        graph = DiGraph()
        self.assertEqual({}, graph.all_in_edges_of_node(1))
        self.assertEqual({}, graph.all_out_edges_of_node(1))
        self.assertEqual([], list(graph.get_all_v().keys()))
        self.assertEqual([], list(self.graph.all_out_edges_of_node(15)))
        self.assertEqual([], list(self.graph.all_in_edges_of_node(15)))
        self.assertEqual({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, self.graph.get_all_v().keys())
        self.assertEqual({1, 9, 13}, self.graph.all_in_edges_of_node(5).keys())
        self.assertEqual({3, 7, 4}, self.graph.all_in_edges_of_node(9).keys())
        self.assertEqual([], list(self.graph.all_in_edges_of_node(1).keys()))
        self.assertEqual({2, 5}, self.graph.all_out_edges_of_node(1).keys())
        self.graph.remove_node(5)
        self.assertEqual({1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14}, self.graph.get_all_v().keys())

    def test_copy(self):
        graph = DiGraph(self.graph)
        self.assertEqual(graph, self.graph)


if __name__ == '__main__':
    unittest.main()
